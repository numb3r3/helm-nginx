{{- if .Values.customizedConfig }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-nginx-config
data:
  nginx.conf: |
    # Based on https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf
    # user              www www;  ## Default: nobody

    worker_processes 4;

    worker_rlimit_nofile 1047552;

    worker_shutdown_timeout 240s ;

    error_log         "/opt/bitnami/nginx/logs/error.log";
    pid               "/opt/bitnami/nginx/tmp/nginx.pid";

    events {
        multi_accept        on;
	    worker_connections  16384;
	    use                 epoll;
    }

    http {
        include       mime.types;
        default_type  application/octet-stream;
        log_format    main '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status  $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log    "/opt/bitnami/nginx/logs/access.log" main;
        add_header    X-Frame-Options SAMEORIGIN;

        client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
        proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
        fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
        scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
        uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

        perl_modules perl/lib;
        perl_set $resolvers '

            sub {
                return system("awk BEGIN{ORS=\" \"} /nameserver/{print \$2}" /etc/resolv.conf");
            };

        resolver "$resolvers";

        aio                 threads;
        aio_write           on;
        
        tcp_nopush          on;
        tcp_nodelay         on;
        
        log_subrequest      on;
        
        reset_timedout_connection on;

        sendfile           on;
        tcp_nopush         on;
        tcp_nodelay        off;
        gzip               on;
        gzip_http_version  1.0;
        gzip_comp_level    2;
        gzip_proxied       any;
        gzip_types         text/plain text/css application/javascript text/xml application/xml+rss;
        keepalive_timeout  65;

        # turn on session caching to drastically improve performance
	
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # allow configuring ssl session tickets
        ssl_session_tickets off;
        
        # slightly reduce the time-to-first-byte
        ssl_buffer_size 4k;
        ssl_protocols      TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
	    ssl_prefer_server_ciphers on;

        client_header_buffer_size       1k;
        client_header_timeout           60s;
        large_client_header_buffers     4 8k;
        client_body_buffer_size         8k;
        client_body_timeout             60s;
        client_max_body_size            80M;

        http2_max_field_size            4k;
        http2_max_header_size           16k;
        http2_max_requests              1000;
        http2_max_concurrent_streams    128;

        proxy_headers_hash_max_size     512;
	    proxy_headers_hash_bucket_size  64;

        variables_hash_bucket_size      256;
        variables_hash_max_size         2048;
        
        underscores_in_headers          off;
        ignore_invalid_headers          on;
        
        limit_req_status                503;
        limit_conn_status               503;

        server_tokens off;

        log_format upstreaminfo '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id';
	
        map $request_uri $loggable {
            
            default 1;
        }

        # See https://www.nginx.com/blog/websocket-nginx
        map $http_upgrade $connection_upgrade {
            default          upgrade;
            
            # See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
            ''               '';
            
        }

        # Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.
        # If no such header is provided, it can provide a random value.
        map $http_x_request_id $req_id {
            default   $http_x_request_id;
            
            ""        $request_id;
            
        }

        server_name_in_redirect off;
	    port_in_redirect        off;

        include  "/opt/bitnami/nginx/conf/server_blocks/*.conf";

        # HTTP Server
        server {
            # Port to listen on, can also be set in IP:PORT format
            listen  8080 backlog=4096;
            listen  8443 backlog=4096 ssl http2;

            set $proxy_upstream_name "-";
		
		    ssl_reject_handshake off;

            include  "/opt/bitnami/nginx/conf/bitnami/*.conf";

            location /status {
                stub_status on;
                access_log   off;
                allow 127.0.0.1;
                deny all;
            }
        }
    }
{{- end }}